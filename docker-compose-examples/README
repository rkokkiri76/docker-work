Make the Container name Static like - my-mariadb-container

○ Set the DB Root password using Env Variable -MARIADB_ROOT_PASSWORD
○ Set the DB Username using Env Variable - MARIADB_USER
○ Set the DB password using Env Variable - MARIADB_PASSWORD
○ Set the DB Name using Env Variable - MARIADB_DATABASE


Execute Wordpress Container -
Make the Container name Static like - wordpress-container

○ Set the DB Container Name in Env Variable - WORDPRESS_DB_HOST
○ Set the DB Name in Env Variable - WORDPRESS_DB_NAME
○ Set the DB User in Env Variable - WORDPRESS_DB_USER
○ Set the DB password in Env Variable - WORDPRESS_DB_PASSWORD
○ Expose Front-End Container on port 8080/80
○ Access WebSite on LocalHost/HostIP:PORT


https://github.com/rkokkiri76/docker-work.git

git config --global user.email "abirajru12@gmail.com"

git config --global user.name "rkokkiri76"

1. normal way

# docker network create maria_word_net


# docker run -d --network maria_word_net -e MARIADB_ROOT_PASSWORD=m_root -e MARIADB_USER=m_user -e MARIADB_PASSWORD=m_password -e MARIADB_DATABASE=m_db --name maria_c mariadb


# docker run -d --network maria_word_net -e WORDPRESS_DB_HOST=maria_c -e WORDPRESS_DB_NAME=m_db -e WORDPRESS_DB_USER=m_user -e WORDPRESS_DB_PASSWORD=m_password  -p 8080:80 --name word_c wordpress


i can able to access wordpress application form http://192.168.2.82:8080/


2. docker compose example

user Dcokerfile and docker-compose.yaml

docker compose up -d



####docker compose commands

# this will only build the images
docker compose build

# get the docker compose version
docker compose version

# it will create containers applications, run the application   and stop
docker compose up  

# it will stop application, remove the containers, remove the networks
docker compose down


# push images to docker hub
docker compose push

#stop container 
docker compose stop

# start containers
docker compose start


# run the container in background
docker compose up -d

# run the docker compose using custom docker compose file
docker compose -f custom_compose.yaml  -d


# view container logs
docker compose logs  // it will show all container logs

docker compose logs WordPress  // specific container logs


docker compose -f Custom_compose.yaml logs  <service name>// custom compose fil 

docker compose -f Custom_compose.yaml logs  <service name> --follow // tail the logs

# login to containers
docker compose exec -it <service> /bin/bash
